
// get the installed SDK
// based on: http://www.egeek.me/2013/12/07/gradle-auto-detect-android-sdk-and-build-tools-versions/
import org.codehaus.groovy.runtime.StackTraceUtils
import org.gradle.internal.os.OperatingSystem;

String sdkDirectoryGet() {
    def sdkDir = android.getSdkDirectory().toString()
    return sdkDir
}

int[] sdkListTry(String toolsDir) {

    def sdks = new ByteArrayOutputStream()
    def sdkDir = sdkDirectoryGet()

    try {
        exec {
            workingDir sdkDir + toolsDir
            if (OperatingSystem.current().isWindows()) {
                commandLine 'cmd', '/c', 'avdmanager.bat', 'list', 'target'
            } else {
                commandLine './avdmanager', 'list', 'target'
            }
            standardOutput = sdks
        }
    }
    catch (ignored) {
    }

    return sdks
            // get the output
            .toString()
            // split to strings
            .split('\n')
            // leave only strings with API levels
            .findAll { it ==~ /\s*API level:\s*(\d+).*/ }
            // extract the API levels
            .collect { (it =~ /\s*API level:\s*(\d+).*/)[0][1].toInteger() }
            // sort from highest to lowest
            .sort( { a, b -> b <=> a } )
}

int[] sdkAvailableList() {

    // first try to use the newer cmdline-tools
    // they can be installed via Android Studio -> SDK Manager -> SDK Tools -> Android SDK Command-line Tools -> Install
    def sdkList = sdkListTry("/cmdline-tools/latest/bin")

    // try with the good old tools
    if ((sdkList == null) || (sdkList.length == 0)) {
        sdkList = sdkListTry("/tools/bin")
    }

    return sdkList
}

int highestSdkAvailable(int preferredSdk) {

    try {
        def sdks = sdkAvailableList()
        def highestSdk = sdks[0]
        if (highestSdk == null) {
            println "No installed SDKs found. Using default SDK " + preferredSdk
            return preferredSdk
        }
        else
        if (sdks.contains(preferredSdk)) {
            println "Preferred SDK found, using: " + preferredSdk
            return preferredSdk
        }
        else {
            println "Using latest found SDK " + highestSdk
            return highestSdk
        }
    }
    catch (any) {
        println "Exception while determining highest SDK. Using default SDK " + preferredSdk
        StackTraceUtils.sanitize(any).printStackTrace()
        preferredSdk
    }
}

// use the newest SDK automatically if the given one is not available
project.ext.set("getSDKIfPossible", { preferred -> return highestSdkAvailable(preferred) });
